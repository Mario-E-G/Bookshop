{"ast":null,"code":"\"use strict\";\n\n// import { HttpClient } from \"@angular/common/http\";\n// import { Component, OnInit } from \"@angular/core\";\n// import {\n//   FormBuilder,\n//   FormGroup,\n//   Validators,\n//   FormControl,\n// } from \"@angular/forms\";\n// import { Router } from \"@angular/router\";\n// import { RegisterService } from \"src/app/service/register.service\";\n// import { User } from \"../interface/user\";\n// @Component({\n//   selector: \"app-register\",\n//   templateUrl: \"./register.component.html\",\n//   styleUrls: [\"./register.component.css\"],\n// })\n// export class RegisterComponent implements OnInit {\n//   newUser!: User;\n//   error?: String;\n//   constructor(\n//     private _register: RegisterService,\n//     private http: HttpClient,\n//     private formBuilder: FormBuilder,\n//     private router: Router\n//   ) {}\n//   registerForm!: FormGroup;\n//   submitted = false;\n//   ngOnInit() {\n//     this.registerForm = this.formBuilder.group(\n//       {\n//         first_name: [\"\", Validators.required],\n//         last_name: [\"\", Validators.required],\n//         email: [\"\", [Validators.required, Validators.email]],\n//         birth_date: [\"\"],\n//         address: [\"\"],\n//         password: [\n//           \"\",\n//           [\n//             Validators.required,\n//             Validators.minLength(8),\n//             Validators.pattern(\"^[a-zA-Z0-9]*\"),\n//           ],\n//         ],\n//         confirm_password: [\"\", Validators.required],\n//         gender: [\"\"],\n//         image_url: [\"\"],\n//         // agree_terms: ['', Validators.required]\n//       },\n//       { validator: this.matchingPasswords(\"password\", \"confirm_password\") }\n//     );\n//   }\n//   matchingPasswords(passwordKey: string, confirmPasswordKey: string) {\n//     return (group: FormGroup) => {\n//       const password = group.controls[passwordKey];\n//       const confirm_password = group.controls[confirmPasswordKey];\n//       if (password.value !== confirm_password.value) {\n//         confirm_password.setErrors({ passwordMismatch: true });\n//       }\n//     };\n//   }\n//   get f() {\n//     return this.registerForm.controls;\n//   }\n//   // onSubmit(f: FormGroup) {\n//   //   this.submitted = true;\n//   //   if (this.registerForm.invalid) {\n//   //     console.log(f);\n//   //     return;\n//   //   }\n//   //   this._register.register(f.value).subscribe((response)=>{\n//   //     if (response.status != 200)\n//   //     {\n//   //       this.error= response.error.Message;\n//   //     }\n//   // })\n//   //   console.log(this.registerForm.value);\n//   //   console.log(\"Form submitted successfully\");\n//   //   this.router.navigate(['/login']);\n//   // }\n//   // onSubmit(f: FormGroup) {\n//   //   this.submitted = true;\n//   //   if (this.registerForm.invalid) {\n//   //     console.log(f);\n//   //     return;\n//   //   }\n//   //   this._register.register(f.value).subscribe(\n//   //     (response) => {\n//   //       if (response.status === 200) {\n//   //         console.log(\"Form submitted successfully\");\n//   //         this.router.navigate(['/login']);\n//   //       } else {\n//   //         console.log(response.ERROR.HttpErrorResponse);\n//   //         this.error = response.ERROR.HttpErrorResponse.error.Message;\n//   //       }\n//   //     }\n//   //   );\n//   // }\n//   // onSubmit(f: FormGroup) {\n//   //   this.submitted = true;\n//   //   if (this.registerForm.invalid) {\n//   //     console.log(f);\n//   //     return;\n//   //   }\n//   //   this._register.register(f.value).subscribe(\n//   //     (response) => {\n//   //       if (response.status === 200) {\n//   //         console.log(\"Form submitted successfully\");\n//   //         this.router.navigate(['/login']);\n//   //       } else {\n//   //         console.log(response.error.Message);\n//   //         this.error = response.error.Message;\n//   //       }\n//   //     },\n//   //     (error) => {\n//   //       console.error(error);\n//   //       this.error = error.message;\n//   //     }\n//   //   );\n//   // }\n//   onSubmit(f: FormGroup) {\n//     this.submitted = true;\n//     if (this.registerForm.invalid) {\n//       console.log(f);\n//       return;\n//     }\n//     this._register.register(f.value).subscribe(\n//       (response) => {\n//         if (response.status == 200) {\n//           console.log(\"Form submitted successfully\");\n//           this.router.navigate([\"/login\"]);\n//         } else {\n//           console.log(response);\n//           this.error = response.error.Message;\n//         }\n//       },\n//       (error) => {\n//         console.log(error);\n//         this.error = error.errors.Message;\n//       }\n//     );\n//   }\n// }\n//////////////////////////////","map":{"version":3,"mappingsnames":[],"sourceRoot":"","sources":["D:\\ITI\\Open Source Track Files\\My Projects\\Front\\src\\app\\components\\register\\register.component.ts"],"sourcesContent":["// import { HttpClient } from \"@angular/common/http\";\r\n// import { Component, OnInit } from \"@angular/core\";\r\n// import {\r\n//   FormBuilder,\r\n//   FormGroup,\r\n//   Validators,\r\n//   FormControl,\r\n// } from \"@angular/forms\";\r\n// import { Router } from \"@angular/router\";\r\n// import { RegisterService } from \"src/app/service/register.service\";\r\n// import { User } from \"../interface/user\";\r\n\r\n// @Component({\r\n//   selector: \"app-register\",\r\n//   templateUrl: \"./register.component.html\",\r\n//   styleUrls: [\"./register.component.css\"],\r\n// })\r\n// export class RegisterComponent implements OnInit {\r\n//   newUser!: User;\r\n\r\n//   error?: String;\r\n//   constructor(\r\n//     private _register: RegisterService,\r\n//     private http: HttpClient,\r\n//     private formBuilder: FormBuilder,\r\n//     private router: Router\r\n//   ) {}\r\n\r\n//   registerForm!: FormGroup;\r\n//   submitted = false;\r\n\r\n//   ngOnInit() {\r\n//     this.registerForm = this.formBuilder.group(\r\n//       {\r\n//         first_name: [\"\", Validators.required],\r\n//         last_name: [\"\", Validators.required],\r\n//         email: [\"\", [Validators.required, Validators.email]],\r\n//         birth_date: [\"\"],\r\n//         address: [\"\"],\r\n//         password: [\r\n//           \"\",\r\n//           [\r\n//             Validators.required,\r\n//             Validators.minLength(8),\r\n//             Validators.pattern(\"^[a-zA-Z0-9]*\"),\r\n//           ],\r\n//         ],\r\n//         confirm_password: [\"\", Validators.required],\r\n//         gender: [\"\"],\r\n//         image_url: [\"\"],\r\n//         // agree_terms: ['', Validators.required]\r\n//       },\r\n//       { validator: this.matchingPasswords(\"password\", \"confirm_password\") }\r\n//     );\r\n//   }\r\n\r\n//   matchingPasswords(passwordKey: string, confirmPasswordKey: string) {\r\n//     return (group: FormGroup) => {\r\n//       const password = group.controls[passwordKey];\r\n//       const confirm_password = group.controls[confirmPasswordKey];\r\n\r\n//       if (password.value !== confirm_password.value) {\r\n//         confirm_password.setErrors({ passwordMismatch: true });\r\n//       }\r\n//     };\r\n//   }\r\n\r\n//   get f() {\r\n//     return this.registerForm.controls;\r\n//   }\r\n\r\n//   // onSubmit(f: FormGroup) {\r\n//   //   this.submitted = true;\r\n//   //   if (this.registerForm.invalid) {\r\n//   //     console.log(f);\r\n//   //     return;\r\n//   //   }\r\n\r\n//   //   this._register.register(f.value).subscribe((response)=>{\r\n//   //     if (response.status != 200)\r\n//   //     {\r\n//   //       this.error= response.error.Message;\r\n//   //     }\r\n//   // })\r\n\r\n//   //   console.log(this.registerForm.value);\r\n\r\n//   //   console.log(\"Form submitted successfully\");\r\n//   //   this.router.navigate(['/login']);\r\n//   // }\r\n\r\n//   // onSubmit(f: FormGroup) {\r\n//   //   this.submitted = true;\r\n//   //   if (this.registerForm.invalid) {\r\n//   //     console.log(f);\r\n//   //     return;\r\n//   //   }\r\n\r\n//   //   this._register.register(f.value).subscribe(\r\n//   //     (response) => {\r\n//   //       if (response.status === 200) {\r\n//   //         console.log(\"Form submitted successfully\");\r\n//   //         this.router.navigate(['/login']);\r\n//   //       } else {\r\n//   //         console.log(response.ERROR.HttpErrorResponse);\r\n//   //         this.error = response.ERROR.HttpErrorResponse.error.Message;\r\n//   //       }\r\n//   //     }\r\n//   //   );\r\n//   // }\r\n\r\n//   // onSubmit(f: FormGroup) {\r\n//   //   this.submitted = true;\r\n//   //   if (this.registerForm.invalid) {\r\n//   //     console.log(f);\r\n//   //     return;\r\n//   //   }\r\n  \r\n//   //   this._register.register(f.value).subscribe(\r\n//   //     (response) => {\r\n//   //       if (response.status === 200) {\r\n//   //         console.log(\"Form submitted successfully\");\r\n//   //         this.router.navigate(['/login']);\r\n//   //       } else {\r\n//   //         console.log(response.error.Message);\r\n//   //         this.error = response.error.Message;\r\n//   //       }\r\n//   //     },\r\n//   //     (error) => {\r\n//   //       console.error(error);\r\n//   //       this.error = error.message;\r\n//   //     }\r\n//   //   );\r\n//   // }\r\n\r\n\r\n//   onSubmit(f: FormGroup) {\r\n//     this.submitted = true;\r\n//     if (this.registerForm.invalid) {\r\n//       console.log(f);\r\n//       return;\r\n//     }\r\n  \r\n//     this._register.register(f.value).subscribe(\r\n//       (response) => {\r\n//         if (response.status == 200) {\r\n//           console.log(\"Form submitted successfully\");\r\n//           this.router.navigate([\"/login\"]);\r\n//         } else {\r\n//           console.log(response);\r\n//           this.error = response.error.Message;\r\n//         }\r\n//       },\r\n//       (error) => {\r\n//         console.log(error);\r\n//         this.error = error.errors.Message;\r\n//       }\r\n//     );\r\n//   }\r\n  \r\n  \r\n// }\r\n\r\n\r\n\r\n\r\n//////////////////////////////\r\n\r\n\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}