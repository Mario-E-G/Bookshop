{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/service/authentication/auth.service\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\", 20);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.error);\n  }\n}\nfunction LoginComponent_div_14_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 23);\n    i0.ɵɵtext(1, \" Email address is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_14_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 23);\n    i0.ɵɵtext(1, \" Invalid email address. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtemplate(1, LoginComponent_div_14_p_1_Template, 2, 0, \"p\", 22);\n    i0.ɵɵtemplate(2, LoginComponent_div_14_p_2_Template, 2, 0, \"p\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r1.loginForm.get(\"email\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r1.loginForm.get(\"email\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"email\"]);\n  }\n}\nfunction LoginComponent_div_19_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 23);\n    i0.ɵɵtext(1, \" Password is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_19_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 23);\n    i0.ɵɵtext(1, \" Password must be at least 8 characters. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21);\n    i0.ɵɵtemplate(1, LoginComponent_div_19_p_1_Template, 2, 0, \"p\", 22);\n    i0.ɵɵtemplate(2, LoginComponent_div_19_p_2_Template, 2, 0, \"p\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.loginForm.controls[\"password\"].errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r2.loginForm.get(\"password\")) == null ? null : tmp_1_0.errors[\"minlength\"]);\n  }\n}\nexport class LoginComponent {\n  constructor(formBuilder, router, _AuthService) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this._AuthService = _AuthService;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: [\"\", [Validators.required, Validators.email]],\n      password: [\"\", [Validators.required, Validators.minLength(8), Validators.pattern(\"^[a-zA-Z0-9]*\")]]\n    });\n  }\n  onSubmit(loginForm) {\n    this._AuthService.login(loginForm.value).subscribe({\n      next: response => {\n        localStorage.setItem(\"token\", response.token);\n        this._AuthService.detachToken();\n        this.router.navigate([\"/\"]);\n      },\n      error: err => {\n        this.error = err.error.Message;\n      }\n    });\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return;\n    }\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 34,\n  vars: 4,\n  consts: [[4, \"ngIf\"], [1, \"container\", \"py-1\"], [1, \"row\", \"justify-content-center\", \"align-items-center\"], [1, \"col-lg-5\", \"col-md-8\", \"col-sm-10\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [1, \"bg-light\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"mb-3\"], [\"for\", \"email\", 1, \"control-label\", \"my-2\", \"text-dark\"], [\"id\", \"email\", \"type\", \"email\", \"formControlName\", \"email\", \"required\", \"\", 1, \"form-control\", \"bg-light\", \"text-dark\"], [\"class\", \"error\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"control-label\", \"my-2\", \"text-dark\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\", \"required\", \"\", 1, \"form-control\", \"bg-light\", \"text-dark\"], [1, \"form-group\", \"w-50\", \"w-100\"], [1, \"col-sm-offset-2\", \"col-sm-10\"], [\"type\", \"submit\", 1, \"btn\", \"btn-dark\", \"btn-lg\", \"btn-block\", 3, \"disabled\"], [1, \"my-3\"], [1, \"mb-0\"], [\"href\", \"#\", 1, \"text-dark-50\", \"fw-bold\"], [1, \"alert\", \"alert-danger\"], [1, \"error\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"text-danger\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, LoginComponent_div_0_Template, 3, 1, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"h4\");\n      i0.ɵɵtext(7, \"Sign in\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 6)(9, \"form\", 7);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_9_listener() {\n        return ctx.onSubmit(ctx.loginForm);\n      });\n      i0.ɵɵelementStart(10, \"div\", 8)(11, \"label\", 9);\n      i0.ɵɵtext(12, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 10);\n      i0.ɵɵtemplate(14, LoginComponent_div_14_Template, 3, 2, \"div\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 8)(16, \"label\", 12);\n      i0.ɵɵtext(17, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"input\", 13);\n      i0.ɵɵtemplate(19, LoginComponent_div_19_Template, 3, 2, \"div\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 14)(21, \"div\", 15)(22, \"button\", 16);\n      i0.ɵɵtext(23, \" Login \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\", 17)(25, \"p\", 18);\n      i0.ɵɵtext(26, \" Don't have an account? \");\n      i0.ɵɵelementStart(27, \"a\", 19);\n      i0.ɵɵtext(28, \"Sign Up\");\n      i0.ɵɵelementEnd()()()()()()()()()()();\n      i0.ɵɵelement(29, \"br\")(30, \"br\")(31, \"br\")(32, \"br\")(33, \"br\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"email\"].invalid && (ctx.loginForm.controls[\"email\"].dirty || ctx.loginForm.controls[\"email\"].touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.loginForm.controls[\"password\"] == null ? null : ctx.loginForm.controls[\"password\"].invalid) && (ctx.loginForm.controls[\"password\"].dirty || ctx.loginForm.controls[\"password\"].touched));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;ICDnEC,2BAAc;IACkBA,YAAW;IAAAA,iBAAI;;;;IAAfA,eAAW;IAAXA,kCAAW;;;;;IAmC3BA,6BAGC;IACCA,4CACF;IAAAA,iBAAI;;;;;IACJA,6BAGC;IACCA,wCACF;IAAAA,iBAAI;;;;;IAnBNA,+BAOC;IACCA,mEAKI;IACJA,mEAKI;IACNA,iBAAM;;;;;;IAXDA,eAAkD;IAAlDA,4IAAkD;IAMlDA,eAA+C;IAA/CA,yIAA+C;;;;;IA2BlDA,6BAGC;IACCA,uCACF;IAAAA,iBAAI;;;;;IACJA,6BAGC;IACCA,yDACF;IAAAA,iBAAI;;;;;IAnBNA,+BAOC;IACCA,mEAKI;IACJA,mEAKI;IACNA,iBAAM;;;;;IAXDA,eAAwD;IAAxDA,+EAAwD;IAMxDA,eAAuD;IAAvDA,gHAAuD;;;ADnE1E,OAAM,MAAOC,cAAc;EAOzBC,YACUC,WAAwB,EACxBC,MAAc,EACdC,YAAyB;IAFzB,gBAAW,GAAXF,WAAW;IACX,WAAM,GAANC,MAAM;IACN,iBAAY,GAAZC,YAAY;IALtB,cAAS,GAAG,KAAK;EAMd;EAEHC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACtCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACU,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CACR,EAAE,EACF,CACEZ,UAAU,CAACW,QAAQ,EACnBX,UAAU,CAACa,SAAS,CAAC,CAAC,CAAC,EACvBb,UAAU,CAACc,OAAO,CAAC,eAAe,CAAC,CACpC;KAEJ,CAAC;EACJ;EAEAC,QAAQ,CAACP,SAAoB;IAC3B,IAAI,CAACF,YAAY,CAACU,KAAK,CAACR,SAAS,CAACS,KAAK,CAAC,CAACC,SAAS,CAAC;MACjDC,IAAI,EAAGC,QAAQ,IAAI;QACjBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACG,KAAK,CAAC;QAC7C,IAAI,CAACjB,YAAY,CAACkB,WAAW,EAAE;QAC/B,IAAI,CAACnB,MAAM,CAACoB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC7B,CAAC;MACDC,KAAK,EAAGC,GAAG,IAAI;QACb,IAAI,CAACD,KAAK,GAAGC,GAAG,CAACD,KAAK,CAACE,OAAO;MAChC;KACD,CAAC;IAEF,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB;IACA,IAAI,IAAI,CAACrB,SAAS,CAACsB,OAAO,EAAE;MAC1B;;EAEJ;;AA7CW5B,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAA6B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV3BlC,+DAEM;MAENA,8BAA4B;MAKdA,uBAAO;MAAAA,iBAAK;MAElBA,8BAAuB;MAGnBA;QAAA,OAAYmC,2BAAmB;MAAA,EAAC;MAGhCnC,+BAA6B;MAExBA,sBAAK;MAAAA,iBACP;MACDA,6BAME;MACFA,kEAoBM;MACRA,iBAAM;MAENA,+BAA6B;MAExBA,0BAAS;MAAAA,iBACX;MACDA,6BAME;MACFA,kEAoBM;MACRA,iBAAM;MACNA,gCAAmC;MAO7BA,wBACF;MAAAA,iBAAS;MACTA,gCAAkB;MAEdA,yCACA;MAAAA,8BAAyC;MAAAA,wBAAO;MAAAA,iBAAI;MAWxEA,sBAAM;;;MA9FMA,eAAuB;MAAvBA,yCAAuB;MAiBlBA,eAIF;MAJEA,oJAIF;MA8BEA,eAIF;MAJEA,mNAIF;MAoBGA,eAA8B;MAA9BA,gDAA8B","names":["Validators","i0","LoginComponent","constructor","formBuilder","router","_AuthService","ngOnInit","loginForm","group","email","required","password","minLength","pattern","onSubmit","login","value","subscribe","next","response","localStorage","setItem","token","detachToken","navigate","error","err","Message","submitted","invalid","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\ITI\\Tasks\\Angular&Node\\Angular\\Bookshop\\src\\app\\components\\login\\login.component.ts","E:\\ITI\\Tasks\\Angular&Node\\Angular\\Bookshop\\src\\app\\components\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from \"src/app/service/authentication/auth.service\";\r\n\r\n@Component({\r\n  selector: \"app-login\",\r\n  templateUrl: \"./login.component.html\",\r\n  styleUrls: [\"./login.component.css\"],\r\n})\r\nexport class LoginComponent {\r\n  email!: string;\r\n  password!: string;\r\n  error?: String;\r\n  loginForm!: FormGroup;\r\n  submitted = false;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private _AuthService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: [\"\", [Validators.required, Validators.email]],\r\n      password: [\r\n        \"\",\r\n        [\r\n          Validators.required,\r\n          Validators.minLength(8),\r\n          Validators.pattern(\"^[a-zA-Z0-9]*\"),\r\n        ],\r\n      ],\r\n    });\r\n  }\r\n\r\n  onSubmit(loginForm: FormGroup) {\r\n    this._AuthService.login(loginForm.value).subscribe({\r\n      next: (response) => {\r\n        localStorage.setItem(\"token\", response.token);\r\n        this._AuthService.detachToken();\r\n        this.router.navigate([\"/\"]);\r\n      },\r\n      error: (err) => {\r\n        this.error = err.error.Message;\r\n      },\r\n    });\r\n\r\n    this.submitted = true;\r\n\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n  }\r\n}\r\n","<div *ngIf=\"\">\r\n  <p class=\"alert alert-danger\">{{ error }}</p>\r\n</div>\r\n\r\n<div class=\"container py-1\">\r\n  <div class=\"row justify-content-center align-items-center\">\r\n    <div class=\"col-lg-5 col-md-8 col-sm-10\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4>Sign in</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <form\r\n            [formGroup]=\"loginForm\"\r\n            (ngSubmit)=\"onSubmit(loginForm)\"\r\n            class=\"bg-light\"\r\n          >\r\n            <div class=\"form-group mb-3\">\r\n              <label for=\"email\" class=\"control-label my-2 text-dark\"\r\n                >Email</label\r\n              >\r\n              <input\r\n                id=\"email\"\r\n                type=\"email\"\r\n                formControlName=\"email\"\r\n                class=\"form-control bg-light text-dark\"\r\n                required\r\n              />\r\n              <div\r\n                class=\"error\"\r\n                *ngIf=\"\r\n                  loginForm.controls['email'].invalid &&\r\n                  (loginForm.controls['email'].dirty ||\r\n                    loginForm.controls['email'].touched)\r\n                \"\r\n              >\r\n                <p\r\n                  *ngIf=\"loginForm.get('email')?.errors?.['required']\"\r\n                  class=\"text-danger\"\r\n                >\r\n                  Email address is required.\r\n                </p>\r\n                <p\r\n                  *ngIf=\"loginForm.get('email')?.errors?.['email']\"\r\n                  class=\"text-danger\"\r\n                >\r\n                  Invalid email address.\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group mb-3\">\r\n              <label for=\"password\" class=\"control-label my-2 text-dark\"\r\n                >Password:</label\r\n              >\r\n              <input\r\n                id=\"password\"\r\n                type=\"password\"\r\n                formControlName=\"password\"\r\n                class=\"form-control bg-light text-dark\"\r\n                required\r\n              />\r\n              <div\r\n                class=\"error\"\r\n                *ngIf=\"\r\n                  loginForm.controls['password']?.invalid &&\r\n                  (loginForm.controls['password'].dirty ||\r\n                    loginForm.controls['password'].touched)\r\n                \"\r\n              >\r\n                <p\r\n                  *ngIf=\"loginForm.controls['password'].errors!['required']\"\r\n                  class=\"text-danger\"\r\n                >\r\n                  Password is required.\r\n                </p>\r\n                <p\r\n                  *ngIf=\"(loginForm.get('password')?.errors)!['minlength']\"\r\n                  class=\"text-danger\"\r\n                >\r\n                  Password must be at least 8 characters.\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group w-50 w-100\">\r\n              <div class=\"col-sm-offset-2 col-sm-10\">\r\n                <button\r\n                  type=\"submit\"\r\n                  [disabled]=\"loginForm.invalid\"\r\n                  class=\"btn btn-dark btn-lg btn-block\"\r\n                >\r\n                  Login\r\n                </button>\r\n                <div class=\"my-3\">\r\n                  <p class=\"mb-0\">\r\n                    Don't have an account?\r\n                    <a href=\"#\" class=\"text-dark-50 fw-bold\">Sign Up</a>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<br />\r\n<br />\r\n<br />\r\n<br />\r\n<br />\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}