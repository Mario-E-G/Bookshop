{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./service/authentication/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(_AuthService, _Router) {\n    this._AuthService = _AuthService;\n    this._Router = _Router;\n  }\n  canActivate(route, state) {\n    if (this._AuthService.currentLogUser.getValue() == null) {\n      this._Router.navigate([\"/login\"]);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":";;;AAcA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,YAAyB,EAAUC,OAAe;IAAlD,iBAAY,GAAZD,YAAY;IAAuB,YAAO,GAAPC,OAAO;EAAW;EAEzEC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAM1B,IAAI,IAAI,CAACJ,YAAY,CAACK,cAAc,CAACC,QAAQ,EAAE,IAAI,IAAI,EAAE;MACvD,IAAI,CAACL,OAAO,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MACjC,OAAO,KAAK;KACb,MAAM;MACL,OAAO,IAAI;;EAEf;;AAjBWT,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAU,SAATV,SAAS;EAAAW,YAFR;AAAM","names":["AuthGuard","constructor","_AuthService","_Router","canActivate","route","state","currentLogUser","getValue","navigate","factory","providedIn"],"sourceRoot":"","sources":["E:\\ITI\\Tasks\\Angular&Node\\Angular\\Bookshop\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { AuthService } from \"./service/authentication/auth.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private _AuthService: AuthService, private _Router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    if (this._AuthService.currentLogUser.getValue() == null) {\n      this._Router.navigate([\"/login\"]);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}