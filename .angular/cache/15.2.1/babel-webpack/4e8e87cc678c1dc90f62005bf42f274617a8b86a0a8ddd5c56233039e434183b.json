{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { Validators } from \"@angular/forms\";\nlet RegisterComponent = class RegisterComponent {\n  constructor(_AuthService, formBuilder, router) {\n    this._AuthService = _AuthService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      first_name: [\"\", Validators.required],\n      last_name: [\"\", Validators.required],\n      email: [\"\", [Validators.required, Validators.email]],\n      birth_date: [\"\"],\n      address: [\"\"],\n      password: [\"\", [Validators.required, Validators.minLength(8), Validators.pattern(\"^[a-zA-Z0-9]*\")]],\n      confirm_password: [\"\", Validators.required],\n      gender: [\"\"],\n      image_url: [\"\"]\n      // agree_terms: ['', Validators.required]\n    }, {\n      validator: this.matchingPasswords(\"password\", \"confirm_password\")\n    });\n  }\n  matchingPasswords(passwordKey, confirmPasswordKey) {\n    return group => {\n      const password = group.controls[passwordKey];\n      const confirm_password = group.controls[confirmPasswordKey];\n      if (password.value !== confirm_password.value) {\n        confirm_password.setErrors({\n          passwordMismatch: true\n        });\n      }\n    };\n  }\n  get f() {\n    return this.registerForm.controls;\n  }\n  onSubmit(f) {\n    this.submitted = true;\n    if (this.registerForm.invalid) {\n      console.log(f);\n      return;\n    }\n    this._AuthService.register(f.value).subscribe({\n      next: response => {\n        if (response.status === 200) {\n          console.log(\"Form submitted successfully\");\n          this.router.navigate([\"/login\"]);\n        }\n      },\n      error: error => {\n        if (error.status === 0) {\n          this.error = \"Unable to connect to the server. Please try again later.\";\n        } else if (error.status === 400) {\n          this.error = error.error.message;\n        } else if (error.status === 409) {\n          this.error = error.error.message;\n          this.timer = setTimeout(() => {\n            this.router.navigate([\"/login\"]);\n          }, 3000); // wait for 3 seconds before navigating\n        } else {\n          this.error = \"An unknown error has occurred. Please try again later.\";\n        }\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: \"app-register\",\n  templateUrl: \"./register.component.html\",\n  styleUrls: [\"./register.component.css\"]\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","RegisterComponent","constructor","_AuthService","formBuilder","router","ngOnInit","registerForm","group","first_name","required","last_name","email","birth_date","address","password","minLength","pattern","confirm_password","gender","image_url","validator","matchingPasswords","passwordKey","confirmPasswordKey","controls","value","setErrors","passwordMismatch","f","onSubmit","submitted","invalid","console","log","register","subscribe","next","response","status","navigate","error","message","timer","setTimeout","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\ITI\\Open Source Track Files\\My Projects\\Front\\src\\app\\components\\register\\register.component.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl,\r\n} from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from \"src/app/service/authentication/auth.service\";\r\nimport { User } from \"../interface/user\";\r\n\r\n@Component({\r\n  selector: \"app-register\",\r\n  templateUrl: \"./register.component.html\",\r\n  styleUrls: [\"./register.component.css\"],\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  newUser!: User;\r\n  error?: String;\r\n  timer?: any;\r\n\r\n  constructor(\r\n    private _AuthService: AuthService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router\r\n  ) {}\r\n\r\n  registerForm!: FormGroup;\r\n  submitted = false;\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formBuilder.group(\r\n      {\r\n        first_name: [\"\", Validators.required],\r\n        last_name: [\"\", Validators.required],\r\n        email: [\"\", [Validators.required, Validators.email]],\r\n        birth_date: [\"\"],\r\n        address: [\"\"],\r\n        password: [\r\n          \"\",\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(8),\r\n            Validators.pattern(\"^[a-zA-Z0-9]*\"),\r\n          ],\r\n        ],\r\n        confirm_password: [\"\", Validators.required],\r\n        gender: [\"\"],\r\n        image_url: [\"\"],\r\n        // agree_terms: ['', Validators.required]\r\n      },\r\n      { validator: this.matchingPasswords(\"password\", \"confirm_password\") }\r\n    );\r\n  }\r\n\r\n  matchingPasswords(passwordKey: string, confirmPasswordKey: string) {\r\n    return (group: FormGroup) => {\r\n      const password = group.controls[passwordKey];\r\n      const confirm_password = group.controls[confirmPasswordKey];\r\n\r\n      if (password.value !== confirm_password.value) {\r\n        confirm_password.setErrors({ passwordMismatch: true });\r\n      }\r\n    };\r\n  }\r\n\r\n  get f() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onSubmit(f: FormGroup) {\r\n    this.submitted = true;\r\n    if (this.registerForm.invalid) {\r\n      console.log(f);\r\n      return;\r\n    }\r\n\r\n    this._AuthService.register(f.value).subscribe({\r\n      next: (response) => {\r\n        if (response.status === 200) {\r\n          console.log(\"Form submitted successfully\");\r\n          this.router.navigate([\"/login\"]);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        if (error.status === 0) {\r\n          this.error =\r\n            \"Unable to connect to the server. Please try again later.\";\r\n        } else if (error.status === 400) {\r\n          this.error = error.error.message;\r\n        } else if (error.status === 409) {\r\n          this.error = error.error.message;\r\n          this.timer = setTimeout(() => {\r\n            this.router.navigate([\"/login\"]);\r\n          }, 3000); // wait for 3 seconds before navigating\r\n        } else {\r\n          this.error = \"An unknown error has occurred. Please try again later.\";\r\n        }\r\n      },\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}