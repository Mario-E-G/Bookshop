{"ast":null,"code":"// import { HttpClient } from \"@angular/common/http\";\n// import { Component, OnInit } from \"@angular/core\";\n// import {\n//   FormBuilder,\n//   FormGroup,\n//   Validators,\n//   FormControl,\n// } from \"@angular/forms\";\n// import { Router } from \"@angular/router\";\n// import { RegisterService } from \"src/app/service/register.service\";\n// import { User } from \"../interface/user\";\nimport { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { Validators } from \"@angular/forms\";\nlet RegisterComponent = class RegisterComponent {\n  constructor(_register, http, formBuilder, router, toastr) {\n    this._register = _register;\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.toastr = toastr;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.toastr.success('Registration successful', 'Success');\n    this.toastr.error('Registration failed', 'Error');\n    this.registerForm = this.formBuilder.group({\n      first_name: [\"\", Validators.required],\n      last_name: [\"\", Validators.required],\n      email: [\"\", [Validators.required, Validators.email]],\n      birth_date: [\"\"],\n      address: [\"\"],\n      password: [\"\", [Validators.required, Validators.minLength(8), Validators.pattern(\"^[a-zA-Z0-9]*\")]],\n      confirm_password: [\"\", Validators.required],\n      gender: [\"\"],\n      image_url: [\"\"]\n      // agree_terms: ['', Validators.required]\n    }, {\n      validator: this.matchingPasswords(\"password\", \"confirm_password\")\n    });\n  }\n  matchingPasswords(passwordKey, confirmPasswordKey) {\n    return group => {\n      const password = group.controls[passwordKey];\n      const confirm_password = group.controls[confirmPasswordKey];\n      if (password.value !== confirm_password.value) {\n        confirm_password.setErrors({\n          passwordMismatch: true\n        });\n      }\n    };\n  }\n  get f() {\n    return this.registerForm.controls;\n  }\n  onSubmit(f) {\n    this.submitted = true;\n    if (this.registerForm.invalid) {\n      console.log(\"Placement: Form is invalid\");\n      return;\n    }\n    this._register.register(f.value).subscribe(response => {\n      if (response.status === 200) {\n        console.log(\"Placement: Form submitted successfully\");\n        this.router.navigate([\"/login\"]);\n      }\n      // else {\n      //   this.error = response.error.Message;\n      // }\n    }, error => {\n      console.error(error);\n      if (error.status === 0) {\n        this.error = \"Placement: Unable to connect to the server. Please try again later.\";\n      } else if (error.status === 400) {\n        this.error = \"Placement: \" + error.error.message;\n      } else if (error.status === 409) {\n        this.error = \"Placement: \" + error.error.message;\n        setTimeout(() => {\n          this.router.navigate([\"/login\"]);\n        }, 3000); // wait for 3 seconds before navigating\n      } else {\n        this.error = \"Placement: An unknown error has occurred. Please try again later.\";\n      }\n    });\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: \"app-register\",\n  templateUrl: \"./register.component.html\",\n  styleUrls: [\"./register.component.css\"]\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAsGA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAGEC,UAAU,QAEL,gBAAgB;AAUhB,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAI5BC,YACUC,SAA0B,EAC1BC,IAAgB,EAChBC,WAAwB,EACxBC,MAAc,EACdC,MAAqB;IAJrB,cAAS,GAATJ,SAAS;IACT,SAAI,GAAJC,IAAI;IACJ,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IACN,WAAM,GAANC,MAAM;IAIhB,cAAS,GAAG,KAAK;EAHd;EAKHC,QAAQ;IACN,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC,yBAAyB,EAAE,SAAS,CAAC;IAC7D,IAAI,CAACF,MAAM,CAACG,KAAK,CAAC,qBAAqB,EAAE,OAAO,CAAC;IAG7C,IAAI,CAACC,YAAY,GAAG,IAAI,CAACN,WAAW,CAACO,KAAK,CACxC;MACEC,UAAU,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACc,QAAQ,CAAC;MACrCC,SAAS,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACc,QAAQ,CAAC;MACpCE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAChB,UAAU,CAACc,QAAQ,EAAEd,UAAU,CAACgB,KAAK,CAAC,CAAC;MACpDC,UAAU,EAAE,CAAC,EAAE,CAAC;MAChBC,OAAO,EAAE,CAAC,EAAE,CAAC;MACbC,QAAQ,EAAE,CACR,EAAE,EACF,CACEnB,UAAU,CAACc,QAAQ,EACnBd,UAAU,CAACoB,SAAS,CAAC,CAAC,CAAC,EACvBpB,UAAU,CAACqB,OAAO,CAAC,eAAe,CAAC,CACpC,CACF;MACDC,gBAAgB,EAAE,CAAC,EAAE,EAAEtB,UAAU,CAACc,QAAQ,CAAC;MAC3CS,MAAM,EAAE,CAAC,EAAE,CAAC;MACZC,SAAS,EAAE,CAAC,EAAE;MACd;KACD,EACD;MAAEC,SAAS,EAAE,IAAI,CAACC,iBAAiB,CAAC,UAAU,EAAE,kBAAkB;IAAC,CAAE,CACtE;EACH;EAEAA,iBAAiB,CAACC,WAAmB,EAAEC,kBAA0B;IAC/D,OAAQhB,KAAgB,IAAI;MAC1B,MAAMO,QAAQ,GAAGP,KAAK,CAACiB,QAAQ,CAACF,WAAW,CAAC;MAC5C,MAAML,gBAAgB,GAAGV,KAAK,CAACiB,QAAQ,CAACD,kBAAkB,CAAC;MAE3D,IAAIT,QAAQ,CAACW,KAAK,KAAKR,gBAAgB,CAACQ,KAAK,EAAE;QAC7CR,gBAAgB,CAACS,SAAS,CAAC;UAAEC,gBAAgB,EAAE;QAAI,CAAE,CAAC;;IAE1D,CAAC;EACH;EAEA,IAAIC,CAAC;IACH,OAAO,IAAI,CAACtB,YAAY,CAACkB,QAAQ;EACnC;EAEAK,QAAQ,CAACD,CAAY;IACnB,IAAI,CAACE,SAAS,GAAG,IAAI;IACrB,IAAI,IAAI,CAACxB,YAAY,CAACyB,OAAO,EAAE;MAC7BC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC;;IAGF,IAAI,CAACnC,SAAS,CAACoC,QAAQ,CAACN,CAAC,CAACH,KAAK,CAAC,CAACU,SAAS,CACvCC,QAAQ,IAAI;MACX,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3BL,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;QACrD,IAAI,CAAChC,MAAM,CAACqC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAElC;MACA;MACA;IACF,CAAC,EACAjC,KAAK,IAAI;MACR2B,OAAO,CAAC3B,KAAK,CAACA,KAAK,CAAC;MACpB,IAAIA,KAAK,CAACgC,MAAM,KAAK,CAAC,EAAE;QACtB,IAAI,CAAChC,KAAK,GACR,qEAAqE;OACxE,MAAQ,IAAIA,KAAK,CAACgC,MAAM,KAAK,GAAG,EAAE;QACjC,IAAI,CAAChC,KAAK,GAAG,aAAa,GAAGA,KAAK,CAACA,KAAK,CAACkC,OAAO;OACjD,MAAM,IAAIlC,KAAK,CAACgC,MAAM,KAAK,GAAG,EAAE;QAC/B,IAAI,CAAChC,KAAK,GAAG,aAAa,GAAGA,KAAK,CAACA,KAAK,CAACkC,OAAO;QAChDC,UAAU,CAAC,MAAK;UACd,IAAI,CAACvC,MAAM,CAACqC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;OACX,MAAM;QACL,IAAI,CAACjC,KAAK,GAAG,mEAAmE;;IAEpF,CAAC,CACF;EACH;CACD;AA9FYT,iBAAiB,eAL7BF,SAAS,CAAC;EACT+C,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACW/C,iBAAiB,CA8F7B;SA9FYA,iBAAiB","names":["Component","Validators","RegisterComponent","constructor","_register","http","formBuilder","router","toastr","ngOnInit","success","error","registerForm","group","first_name","required","last_name","email","birth_date","address","password","minLength","pattern","confirm_password","gender","image_url","validator","matchingPasswords","passwordKey","confirmPasswordKey","controls","value","setErrors","passwordMismatch","f","onSubmit","submitted","invalid","console","log","register","subscribe","response","status","navigate","message","setTimeout","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\ITI\\Open Source Track Files\\My Projects\\Front\\src\\app\\components\\register\\register.component.ts"],"sourcesContent":["// import { HttpClient } from \"@angular/common/http\";\r\n// import { Component, OnInit } from \"@angular/core\";\r\n// import {\r\n//   FormBuilder,\r\n//   FormGroup,\r\n//   Validators,\r\n//   FormControl,\r\n// } from \"@angular/forms\";\r\n// import { Router } from \"@angular/router\";\r\n// import { RegisterService } from \"src/app/service/register.service\";\r\n// import { User } from \"../interface/user\";\r\n\r\n// @Component({\r\n//   selector: \"app-register\",\r\n//   templateUrl: \"./register.component.html\",\r\n//   styleUrls: [\"./register.component.css\"],\r\n// })\r\n// export class RegisterComponent implements OnInit {\r\n//   newUser!: User;\r\n\r\n//   error?: String;\r\n//   constructor(\r\n//     private _register: RegisterService,\r\n//     private http: HttpClient,\r\n//     private formBuilder: FormBuilder,\r\n//     private router: Router\r\n//   ) {}\r\n\r\n//   registerForm!: FormGroup;\r\n//   submitted = false;\r\n\r\n//   ngOnInit() {\r\n//     this.registerForm = this.formBuilder.group(\r\n//       {\r\n//         first_name: [\"\", Validators.required],\r\n//         last_name: [\"\", Validators.required],\r\n//         email: [\"\", [Validators.required, Validators.email]],\r\n//         birth_date: [\"\"],\r\n//         address: [\"\"],\r\n//         password: [\r\n//           \"\",\r\n//           [\r\n//             Validators.required,\r\n//             Validators.minLength(8),\r\n//             Validators.pattern(\"^[a-zA-Z0-9]*\"),\r\n//           ],\r\n//         ],\r\n//         confirm_password: [\"\", Validators.required],\r\n//         gender: [\"\"],\r\n//         image_url: [\"\"],\r\n//         // agree_terms: ['', Validators.required]\r\n//       },\r\n//       { validator: this.matchingPasswords(\"password\", \"confirm_password\") }\r\n//     );\r\n//   }\r\n\r\n//   matchingPasswords(passwordKey: string, confirmPasswordKey: string) {\r\n//     return (group: FormGroup) => {\r\n//       const password = group.controls[passwordKey];\r\n//       const confirm_password = group.controls[confirmPasswordKey];\r\n\r\n//       if (password.value !== confirm_password.value) {\r\n//         confirm_password.setErrors({ passwordMismatch: true });\r\n//       }\r\n//     };\r\n//   }\r\n\r\n//   get f() {\r\n//     return this.registerForm.controls;\r\n//   }\r\n\r\n//   onSubmit(f: FormGroup) {\r\n//     this.submitted = true;\r\n//     if (this.registerForm.invalid) {\r\n//       console.log(f);\r\n//       return;\r\n//     }\r\n\r\n//     this._register.register(f.value).subscribe(\r\n//       (response) => {\r\n//         if (response.status === 200) {\r\n//           console.log(\"Form submitted successfully\");\r\n//           this.router.navigate([\"/login\"]);\r\n//         }\r\n//         // else {\r\n//         //   this.error = response.error.Message;\r\n//         // }\r\n//       },\r\n//       (error) => {\r\n//         console.error(error);\r\n//         if (error.status === 0) {\r\n//           this.error =\r\n//             \"Unable to connect to the server. Please try again later.\";\r\n//         } else if (error.status === 400) {\r\n//           this.error = error.error.message;\r\n//         } else if (error.status === 409) {\r\n//           this.error = error.error.message;\r\n//           setTimeout(() => {\r\n//             this.router.navigate([\"/login\"]);\r\n//           }, 3000); // wait for 3 seconds before navigating\r\n//         } else {\r\n//           this.error = \"An unknown error has occurred. Please try again later.\";\r\n//         }\r\n//       }\r\n//     );\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl,\r\n} from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { RegisterService } from \"src/app/service/register.service\";\r\nimport { User } from \"../interface/user\";\r\n\r\n@Component({\r\n  selector: \"app-register\",\r\n  templateUrl: \"./register.component.html\",\r\n  styleUrls: [\"./register.component.css\"],\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  newUser!: User;\r\n\r\n  error?: String;\r\n  constructor(\r\n    private _register: RegisterService,\r\n    private http: HttpClient,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private toastr: ToastrService\r\n  ) {}\r\n\r\n  registerForm!: FormGroup;\r\n  submitted = false;\r\n\r\n  ngOnInit() {\r\n    this.toastr.success('Registration successful', 'Success');\r\nthis.toastr.error('Registration failed', 'Error');\r\n\r\n\r\n    this.registerForm = this.formBuilder.group(\r\n      {\r\n        first_name: [\"\", Validators.required],\r\n        last_name: [\"\", Validators.required],\r\n        email: [\"\", [Validators.required, Validators.email]],\r\n        birth_date: [\"\"],\r\n        address: [\"\"],\r\n        password: [\r\n          \"\",\r\n          [\r\n            Validators.required,\r\n            Validators.minLength(8),\r\n            Validators.pattern(\"^[a-zA-Z0-9]*\"),\r\n          ],\r\n        ],\r\n        confirm_password: [\"\", Validators.required],\r\n        gender: [\"\"],\r\n        image_url: [\"\"],\r\n        // agree_terms: ['', Validators.required]\r\n      },\r\n      { validator: this.matchingPasswords(\"password\", \"confirm_password\") }\r\n    );\r\n  }\r\n\r\n  matchingPasswords(passwordKey: string, confirmPasswordKey: string) {\r\n    return (group: FormGroup) => {\r\n      const password = group.controls[passwordKey];\r\n      const confirm_password = group.controls[confirmPasswordKey];\r\n\r\n      if (password.value !== confirm_password.value) {\r\n        confirm_password.setErrors({ passwordMismatch: true });\r\n      }\r\n    };\r\n  }\r\n\r\n  get f() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onSubmit(f: FormGroup) {\r\n    this.submitted = true;\r\n    if (this.registerForm.invalid) {\r\n      console.log(\"Placement: Form is invalid\");\r\n      return;\r\n    }\r\n\r\n    this._register.register(f.value).subscribe(\r\n      (response) => {\r\n        if (response.status === 200) {\r\n          console.log(\"Placement: Form submitted successfully\");\r\n          this.router.navigate([\"/login\"]);\r\n        }\r\n        // else {\r\n        //   this.error = response.error.Message;\r\n        // }\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n        if (error.status === 0) {\r\n          this.error =\r\n            \"Placement: Unable to connect to the server. Please try again later.\";\r\n        }   else if (error.status === 400) {\r\n          this.error = \"Placement: \" + error.error.message;\r\n        } else if (error.status === 409) {\r\n          this.error = \"Placement: \" + error.error.message;\r\n          setTimeout(() => {\r\n            this.router.navigate([\"/login\"]);\r\n          }, 3000); // wait for 3 seconds before navigating\r\n        } else {\r\n          this.error = \"Placement: An unknown error has occurred. Please try again later.\";\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}