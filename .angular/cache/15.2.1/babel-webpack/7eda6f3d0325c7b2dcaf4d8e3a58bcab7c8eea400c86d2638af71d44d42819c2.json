{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction LoginComponent_div_13_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 18);\n    i0.ɵɵtext(1, \" Email address is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_13_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 18);\n    i0.ɵɵtext(1, \" Invalid email address. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, LoginComponent_div_13_p_1_Template, 2, 0, \"p\", 17);\n    i0.ɵɵtemplate(2, LoginComponent_div_13_p_2_Template, 2, 0, \"p\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.loginForm.get(\"email\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.loginForm.get(\"email\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"email\"]);\n  }\n}\nfunction LoginComponent_div_18_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 18);\n    i0.ɵɵtext(1, \" Password is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_18_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \" Password must be at least 8 characters. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, LoginComponent_div_18_p_1_Template, 2, 0, \"p\", 17);\n    i0.ɵɵtemplate(2, LoginComponent_div_18_p_2_Template, 2, 0, \"p\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loginForm.controls[\"password\"].errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r1.loginForm.get(\"password\")) == null ? null : tmp_1_0.errors[\"minlength\"]);\n  }\n}\nexport class LoginComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  onSubmit(loginForm) {\n    this.submitted = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n    // Handle form submission here\n  }\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 23,\n  vars: 4,\n  consts: [[1, \"container\"], [1, \"row\", \"justify-content-center\", \"align-items-center\"], [1, \"col-lg-5\", \"col-md-8\", \"col-sm-10\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [1, \"bg-light\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"mb-3\"], [\"for\", \"email\", 1, \"control-label\", \"col-sm-2\", \"my-2\", \"text-dark\"], [\"id\", \"email\", \"type\", \"email\", \"formControlName\", \"email\", \"required\", \"\", 1, \"form-control\", \"bg-light\", \"text-dark\"], [\"class\", \"error\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"control-label\", \"col-sm-2\", \"my-2\", \"text-dark\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\", \"required\", \"\", 1, \"form-control\", \"bg-light\", \"text-dark\"], [1, \"form-group\", \"w-50\"], [1, \"col-sm-offset-2\", \"col-sm-10\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"error\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"text-danger\"], [4, \"ngIf\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h4\");\n      i0.ɵɵtext(6, \"Login\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 5)(8, \"form\", 6);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_8_listener() {\n        return ctx.onSubmit(ctx.loginForm);\n      });\n      i0.ɵɵelementStart(9, \"div\", 7)(10, \"label\", 8);\n      i0.ɵɵtext(11, \"Email:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 9);\n      i0.ɵɵtemplate(13, LoginComponent_div_13_Template, 3, 2, \"div\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 7)(15, \"label\", 11);\n      i0.ɵɵtext(16, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 12);\n      i0.ɵɵtemplate(18, LoginComponent_div_18_Template, 3, 2, \"div\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\", 13)(20, \"div\", 14)(21, \"button\", 15);\n      i0.ɵɵtext(22, \" Login \");\n      i0.ɵɵelementEnd()()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"email\"].invalid && (ctx.loginForm.controls[\"email\"].dirty || ctx.loginForm.controls[\"email\"].touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.loginForm.controls[\"password\"] == null ? null : ctx.loginForm.controls[\"password\"].invalid) && (ctx.loginForm.controls[\"password\"].dirty || ctx.loginForm.controls[\"password\"].touched));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n    }\n  },\n  dependencies: [i2.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;ICkBrCC,6BAA4E;IACxEA,4CACJ;IAAAA,iBAAI;;;;;IACJA,6BAAyE;IACrEA,wCACJ;IAAAA,iBAAI;;;;;IAVRA,+BAIJ;IACQA,mEAEI;IACJA,mEAEI;IACRA,iBAAM;;;;;;IANEA,eAAkD;IAAlDA,4IAAkD;IAGlDA,eAA+C;IAA/CA,yIAA+C;;;;;IAiBnDA,6BAAkF;IAC9EA,uCACJ;IAAAA,iBAAI;;;;;IACJA,yBAA6D;IACzDA,yDACJ;IAAAA,iBAAI;;;;;IAVRA,+BAIJ;IACQA,mEAEI;IACJA,mEAEI;IACRA,iBAAM;;;;;IANEA,eAAwD;IAAxDA,+EAAwD;IAGxDA,eAAuD;IAAvDA,gHAAuD;;;ADlCzF,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAF/B,cAAS,GAAG,KAAK;EAE+B;EAEhDC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACtCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACQ,KAAK,CAAC,CAAC;MACpDE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,CAAC;KAC9D,CAAC;EACJ;EAEAC,QAAQ,CAACN,SAAoB;IAC3B,IAAI,CAACO,SAAS,GAAG,IAAI;IACrB,IAAI,IAAI,CAACP,SAAS,CAACQ,OAAO,EAAE;MAC1B;;IAEF;EACF;;;AAnBWZ,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAa;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCR3BlB,8BAAuB;MAKDA,qBAAK;MAAAA,iBAAK;MAElBA,8BAAuB;MACWA;QAAA,OAAYmB,2BAAmB;MAAA,EAAC;MAE1DnB,8BAA6B;MACwCA,uBAAM;MAAAA,iBAAQ;MAC/EA,4BACuD;MACvDA,kEAWM;MACVA,iBAAM;MAINA,+BAA6B;MAC2CA,0BAAS;MAAAA,iBAAQ;MACrFA,6BACuD;MACvDA,kEAWM;MACVA,iBAAM;MACNA,gCAA6B;MAGjBA,wBACJ;MAAAA,iBAAS;;;MA3CfA,eAAuB;MAAvBA,yCAAuB;MAMDA,eAI7B;MAJ6BA,oJAI7B;MAgB6BA,eAI7B;MAJ6BA,mNAI7B;MAWmCA,eAA8B;MAA9BA,gDAA8B","names":["Validators","i0","LoginComponent","constructor","formBuilder","ngOnInit","loginForm","group","email","required","password","minLength","onSubmit","submitted","invalid","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\ITI\\ITI projects\\angular\\Bookshop\\src\\app\\login\\login.component.ts","D:\\ITI\\ITI projects\\angular\\Bookshop\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm!: FormGroup;\r\n  submitted = false;\r\n\r\n  constructor(private formBuilder: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n  }\r\n\r\n  onSubmit(loginForm: FormGroup) {\r\n    this.submitted = true;\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n    // Handle form submission here\r\n  }\r\n}","<div class=\"container\">\r\n  <div class=\"row justify-content-center align-items-center\">\r\n      <div class=\"col-lg-5 col-md-8 col-sm-10\">\r\n          <div class=\"card\">\r\n              <div class=\"card-header\">\r\n                  <h4>Login</h4>\r\n              </div>\r\n              <div class=\"card-body\">\r\n                  <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit(loginForm)\" class=\"bg-light\">\r\n\r\n                      <div class=\"form-group mb-3\">\r\n                          <label for=\"email\" class=\"control-label col-sm-2 my-2 text-dark\">Email:</label>\r\n                          <input id=\"email\" type=\"email\" formControlName=\"email\"\r\n                              class=\"form-control bg-light text-dark\" required />\r\n                          <div class=\"error\" *ngIf=\"\r\n                    loginForm.controls['email'].invalid &&\r\n                    (loginForm.controls['email'].dirty ||\r\n                    loginForm.controls['email'].touched)\r\n                    \">\r\n                              <p *ngIf=\"loginForm.get('email')?.errors?.['required']\" class=\"text-danger\">\r\n                                  Email address is required.\r\n                              </p>\r\n                              <p *ngIf=\"loginForm.get('email')?.errors?.['email']\" class=\"text-danger\">\r\n                                  Invalid email address.\r\n                              </p>\r\n                          </div>\r\n                      </div>\r\n\r\n\r\n\r\n                      <div class=\"form-group mb-3\">\r\n                          <label for=\"password\" class=\"control-label col-sm-2 my-2 text-dark\">Password:</label>\r\n                          <input id=\"password\" type=\"password\" formControlName=\"password\"\r\n                              class=\"form-control bg-light text-dark\" required />\r\n                          <div class=\"error\" *ngIf=\"\r\n                    loginForm.controls['password']?.invalid &&\r\n                    (loginForm.controls['password'].dirty ||\r\n                    loginForm.controls['password'].touched)\r\n                    \">\r\n                              <p *ngIf=\"loginForm.controls['password'].errors!['required']\" class=\"text-danger\">\r\n                                  Password is required.\r\n                              </p>\r\n                              <p *ngIf=\"(loginForm.get('password')?.errors)!['minlength']\">\r\n                                  Password must be at least 8 characters.\r\n                              </p>\r\n                          </div>\r\n                      </div>\r\n                      <div class=\"form-group w-50\">\r\n                          <div class=\"col-sm-offset-2 col-sm-10\">\r\n                              <button type=\"submit\" [disabled]=\"loginForm.invalid\" class=\"btn btn-primary\">\r\n                                  Login\r\n                              </button>\r\n                          </div>\r\n                      </div>\r\n                  </form>\r\n              </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}