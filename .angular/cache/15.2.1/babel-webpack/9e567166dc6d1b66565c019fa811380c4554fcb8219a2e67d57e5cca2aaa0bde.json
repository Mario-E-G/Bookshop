{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_div_13_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 20);\n    i0.ɵɵtext(1, \" Email address is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_13_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 20);\n    i0.ɵɵtext(1, \" Invalid email address. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, LoginComponent_div_13_p_1_Template, 2, 0, \"p\", 19);\n    i0.ɵɵtemplate(2, LoginComponent_div_13_p_2_Template, 2, 0, \"p\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.loginForm.get(\"email\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.loginForm.get(\"email\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"email\"]);\n  }\n}\nfunction LoginComponent_div_18_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 20);\n    i0.ɵɵtext(1, \" Password is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_18_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \" Password must be at least 8 characters. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, LoginComponent_div_18_p_1_Template, 2, 0, \"p\", 19);\n    i0.ɵɵtemplate(2, LoginComponent_div_18_p_2_Template, 2, 0, \"p\", 21);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.loginForm.controls[\"password\"].errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r1.loginForm.get(\"password\")) == null ? null : tmp_1_0.errors[\"minlength\"]);\n  }\n}\nexport class LoginComponent {\n  constructor(http, formBuilder, router) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.submitted = false;\n  }\n  login() {\n    const data = {\n      email: this.email,\n      password: this.password\n    };\n    this.http.post('http://localhost:3000/login', data).subscribe(response => {\n      console.log(response);\n    }, error => {\n      console.error(error);\n    });\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(8), Validators.pattern('^[a-zA-Z0-9]*')]]\n    });\n  }\n  get field() {\n    return this.loginForm.controls;\n  }\n  onSubmit(loginForm) {\n    console.log(loginForm);\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return;\n    }\n    // do something when form is submitted successfully\n    console.log('Form submitted successfully');\n    // this.router.navigate(['/home']);\n  }\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 28,\n  vars: 4,\n  consts: [[1, \"container\"], [1, \"row\", \"justify-content-center\", \"align-items-center\"], [1, \"col-lg-5\", \"col-md-8\", \"col-sm-10\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [1, \"bg-light\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"mb-3\"], [\"for\", \"email\", 1, \"control-label\", \"my-2\", \"text-dark\"], [\"id\", \"email\", \"type\", \"email\", \"formControlName\", \"email\", \"required\", \"\", 1, \"form-control\", \"bg-light\", \"text-dark\"], [\"class\", \"error\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"control-label\", \"my-2\", \"text-dark\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\", \"required\", \"\", 1, \"form-control\", \"bg-light\", \"text-dark\"], [1, \"form-group\", \"w-50\"], [1, \"col-sm-offset-2\", \"col-sm-10\"], [\"type\", \"submit\", 1, \"btn\", \"btn-dark\", \"btn-lg\", \"btn-block\", 3, \"disabled\"], [1, \"mb-0\"], [\"href\", \"#!\", 1, \"text-white-50\", \"fw-bold\"], [1, \"error\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"text-danger\"], [4, \"ngIf\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h4\");\n      i0.ɵɵtext(6, \"Sign into your account\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 5)(8, \"form\", 6);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_8_listener() {\n        return ctx.onSubmit(ctx.loginForm);\n      });\n      i0.ɵɵelementStart(9, \"div\", 7)(10, \"label\", 8);\n      i0.ɵɵtext(11, \"Email:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 9);\n      i0.ɵɵtemplate(13, LoginComponent_div_13_Template, 3, 2, \"div\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 7)(15, \"label\", 11);\n      i0.ɵɵtext(16, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 12);\n      i0.ɵɵtemplate(18, LoginComponent_div_18_Template, 3, 2, \"div\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\", 13)(20, \"div\", 14)(21, \"button\", 15);\n      i0.ɵɵtext(22, \" Login \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"div\")(24, \"p\", 16);\n      i0.ɵɵtext(25, \"Don't have an account? \");\n      i0.ɵɵelementStart(26, \"a\", 17);\n      i0.ɵɵtext(27, \"Sign Up\");\n      i0.ɵɵelementEnd()()()()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"email\"].invalid && (ctx.loginForm.controls[\"email\"].dirty || ctx.loginForm.controls[\"email\"].touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.loginForm.controls[\"password\"] == null ? null : ctx.loginForm.controls[\"password\"].invalid) && (ctx.loginForm.controls[\"password\"].dirty || ctx.loginForm.controls[\"password\"].touched));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","LoginComponent","constructor","http","formBuilder","router","login","data","email","password","post","subscribe","response","console","log","error","ngOnInit","loginForm","group","required","minLength","pattern","field","controls","onSubmit","submitted","invalid","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\ITI\\ITI projects\\angular\\Bookshop\\src\\app\\login\\login.component.ts","D:\\ITI\\ITI projects\\angular\\Bookshop\\src\\app\\login\\login.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport class LoginComponent {\r\n  email!: string;\r\n  password!: string;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router\r\n  ) {}\r\n\r\n  login() {\r\n    const data = {\r\n      email: this.email,\r\n      password: this.password,\r\n    };\r\n\r\n    this.http.post('http://localhost:3000/login', data).subscribe(\r\n      (response) => {\r\n        console.log(response);\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  loginForm!: FormGroup;\r\n  submitted = false;\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.minLength(8),\r\n          Validators.pattern('^[a-zA-Z0-9]*'),\r\n        ],\r\n      ],\r\n    });\r\n  }\r\n\r\n  get field() {\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  onSubmit(loginForm:FormGroup) {\r\n    console.log(loginForm);\r\n    \r\n    this.submitted = true;\r\n\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    // do something when form is submitted successfully\r\n    console.log('Form submitted successfully');\r\n    // this.router.navigate(['/home']);\r\n  }\r\n}","<div class=\"container\">\r\n  <div class=\"row justify-content-center align-items-center\">\r\n    <div class=\"col-lg-5 col-md-8 col-sm-10\">\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <h4>Sign into your account</h4>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <form\r\n            [formGroup]=\"loginForm\"\r\n            (ngSubmit)=\"onSubmit(loginForm)\"\r\n            class=\"bg-light\"\r\n          >\r\n            <div class=\"form-group mb-3\">\r\n              <label for=\"email\" class=\"control-label my-2 text-dark\"\r\n                >Email:</label\r\n              >\r\n              <input\r\n                id=\"email\"\r\n                type=\"email\"\r\n                formControlName=\"email\"\r\n                class=\"form-control bg-light text-dark\"\r\n                required\r\n              />\r\n              <div\r\n                class=\"error\"\r\n                *ngIf=\"\r\n                  loginForm.controls['email'].invalid &&\r\n                  (loginForm.controls['email'].dirty ||\r\n                    loginForm.controls['email'].touched)\r\n                \"\r\n              >\r\n                <p\r\n                  *ngIf=\"loginForm.get('email')?.errors?.['required']\"\r\n                  class=\"text-danger\"\r\n                >\r\n                  Email address is required.\r\n                </p>\r\n                <p\r\n                  *ngIf=\"loginForm.get('email')?.errors?.['email']\"\r\n                  class=\"text-danger\"\r\n                >\r\n                  Invalid email address.\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group mb-3\">\r\n              <label for=\"password\" class=\"control-label my-2 text-dark\"\r\n                >Password:</label\r\n              >\r\n              <input\r\n                id=\"password\"\r\n                type=\"password\"\r\n                formControlName=\"password\"\r\n                class=\"form-control bg-light text-dark\"\r\n                required\r\n              />\r\n              <div\r\n                class=\"error\"\r\n                *ngIf=\"\r\n                  loginForm.controls['password']?.invalid &&\r\n                  (loginForm.controls['password'].dirty ||\r\n                    loginForm.controls['password'].touched)\r\n                \"\r\n              >\r\n                <p\r\n                  *ngIf=\"loginForm.controls['password'].errors!['required']\"\r\n                  class=\"text-danger\"\r\n                >\r\n                  Password is required.\r\n                </p>\r\n                <p *ngIf=\"(loginForm.get('password')?.errors)!['minlength']\">\r\n                  Password must be at least 8 characters.\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group w-50\">\r\n              <div class=\"col-sm-offset-2 col-sm-10\">\r\n                <button\r\n                  type=\"submit\"\r\n                  [disabled]=\"loginForm.invalid\"\r\n                  class=\"btn btn-dark btn-lg btn-block\">\r\n                 Login\r\n                </button>\r\n                <div>\r\n                  <p class=\"mb-0\">Don't have an account? <a href=\"#!\" class=\"text-white-50 fw-bold\">Sign Up</a>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}